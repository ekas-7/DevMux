{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/Desktop/DevMux/lib/googe.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n      GoogleProvider({\n          clientId: process.env.GOOGLE_CLIENT_ID!,\n          clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      }),\n  ],\n  callbacks: {\n      async jwt({ token, user }) {\n          if (user) {\n              token.id = user.id;\n          }\n          return token;\n      },\n      async session({ session, token }) {\n          if (session.user) {\n              session.user.id = token.id as string;\n          }\n          return session;\n      },\n      async signIn({ user, account}) {\n          if (account?.provider === \"google\") {\n              try {\n                  // First check if user exists\n                  const existingUser = await prisma.user.findUnique({\n                      where: { email: user.email! }\n                  });\n\n                  // Only create user if they don't exist\n                  if (!existingUser) {\n                      await prisma.user.create({\n                          data: {\n                              email: user.email!,\n                              name: user.name || '',\n                              image: user.image || null,\n                          }\n                      });\n                  }\n              } catch (error) {\n                  console.error(\"Error saving user to database:\", error);\n                  return false;\n              }\n          }\n          return true;\n      },\n      },\n};"],"names":[],"mappings":";;;AACA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,MAAM,cAA+B;IAC1C,WAAW;QACP,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACX,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAClD;KACH;IACD,WAAW;QACP,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACrB,IAAI,MAAM;gBACN,MAAM,EAAE,GAAG,KAAK,EAAE;YACtB;YACA,OAAO;QACX;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC5B,IAAI,QAAQ,IAAI,EAAE;gBACd,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC9B;YACA,OAAO;QACX;QACA,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAC;YACzB,IAAI,SAAS,aAAa,UAAU;gBAChC,IAAI;oBACA,6BAA6B;oBAC7B,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;wBAC9C,OAAO;4BAAE,OAAO,KAAK,KAAK;wBAAE;oBAChC;oBAEA,uCAAuC;oBACvC,IAAI,CAAC,cAAc;wBACf,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;4BACrB,MAAM;gCACF,OAAO,KAAK,KAAK;gCACjB,MAAM,KAAK,IAAI,IAAI;gCACnB,OAAO,KAAK,KAAK,IAAI;4BACzB;wBACJ;oBACJ;gBACJ,EAAE,OAAO,OAAO;oBACZ,QAAQ,KAAK,CAAC,kCAAkC;oBAChD,OAAO;gBACX;YACJ;YACA,OAAO;QACX;IACA;AACN"}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/Desktop/DevMux/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { DefaultSession} from \"next-auth\";\nimport { authOptions } from \"@/lib/googe\";\n\n\n\n\ndeclare module \"next-auth\" {\n    interface Session {\n        user: {\n            id: string;\n        } & DefaultSession[\"user\"]\n    }\n    interface User {\n        id: string;\n    }\n}\n\n\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST }; "],"names":[],"mappings":";;;;AAAA;AACA;;;AAkBA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,8GAAA,CAAA,cAAW"}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}