{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/lib/googe.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n      GoogleProvider({\n          clientId: process.env.GOOGLE_CLIENT_ID!,\n          clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      }),\n  ],\n  callbacks: {\n      async jwt({ token, user }) {\n          if (user) {\n              token.id = user.id;\n          }\n          return token;\n      },\n      async session({ session, token }) {\n          if (session.user) {\n              session.user.id = token.id as string;\n          }\n          return session;\n      },\n      async signIn({ user, account}) {\n          if (account?.provider === \"google\") {\n              try {\n                  // First check if user exists\n                  const existingUser = await prisma.user.findUnique({\n                      where: { email: user.email! }\n                  });\n\n                  // Only create user if they don't exist\n                  if (!existingUser) {\n                      await prisma.user.create({\n                          data: {\n                              email: user.email!,\n                              name: user.name || '',\n                              image: user.image || null,\n                          }\n                      });\n                  }\n              } catch (error) {\n                  console.error(\"Error saving user to database:\", error);\n                  return false;\n              }\n          }\n          return true;\n      },\n      },\n};"],"names":[],"mappings":";;;AACA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,MAAM,cAA+B;IAC1C,WAAW;QACP,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACX,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAClD;KACH;IACD,WAAW;QACP,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACrB,IAAI,MAAM;gBACN,MAAM,EAAE,GAAG,KAAK,EAAE;YACtB;YACA,OAAO;QACX;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC5B,IAAI,QAAQ,IAAI,EAAE;gBACd,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC9B;YACA,OAAO;QACX;QACA,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAC;YACzB,IAAI,SAAS,aAAa,UAAU;gBAChC,IAAI;oBACA,6BAA6B;oBAC7B,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;wBAC9C,OAAO;4BAAE,OAAO,KAAK,KAAK;wBAAE;oBAChC;oBAEA,uCAAuC;oBACvC,IAAI,CAAC,cAAc;wBACf,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;4BACrB,MAAM;gCACF,OAAO,KAAK,KAAK;gCACjB,MAAM,KAAK,IAAI,IAAI;gCACnB,OAAO,KAAK,KAAK,IAAI;4BACzB;wBACJ;oBACJ;gBACJ,EAAE,OAAO,OAAO;oBACZ,QAAQ,KAAK,CAAC,kCAAkC;oBAChD,OAAO;gBACX;YACJ;YACA,OAAO;QACX;IACA;AACN"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/lib/auth.ts"],"sourcesContent":["import { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/googe';\n\nexport const auth = async () => {\n  const session = await getServerSession(authOptions);\n  return session;\n};\n\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,OAAO;IAClB,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,8GAAA,CAAA,cAAW;IAClD,OAAO;AACT"}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/app/api/friends/requests/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { auth } from '@/lib/auth';\n\nexport async function GET() {\n  try {\n    const session = await auth();\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const requests = await prisma.friendRequest.findMany({\n      where: {\n        receiverEmail: session.user.email,\n        status: 'pending',\n      },\n      include: {\n        sender: {\n          select: {\n            email: true,\n            name: true,\n          },\n        },\n      },\n    });\n\n    return NextResponse.json(requests);\n  } catch (error) {\n    console.error('Error fetching friend requests:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}\n\nexport async function POST(req: Request) {\n  try {\n    const session = await auth();\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    const { receiverEmail } = await req.json();\n    const request = await prisma.friendRequest.create({\n      data: {\n        senderEmail: session.user.email,\n        receiverEmail,\n      },\n    });\n\n    return NextResponse.json(request);\n  } catch (error) {\n    console.error('Error creating friend request:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,6GAAA,CAAA,OAAI,AAAD;QACzB,IAAI,CAAC,SAAS,MAAM,OAAO;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,WAAW,MAAM,+GAAA,CAAA,SAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;YACnD,OAAO;gBACL,eAAe,QAAQ,IAAI,CAAC,KAAK;gBACjC,QAAQ;YACV;YACA,SAAS;gBACP,QAAQ;oBACN,QAAQ;wBACN,OAAO;wBACP,MAAM;oBACR;gBACF;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,6GAAA,CAAA,OAAI,AAAD;QACzB,IAAI,CAAC,SAAS,MAAM,OAAO;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,IAAI;QACxC,MAAM,UAAU,MAAM,+GAAA,CAAA,SAAM,CAAC,aAAa,CAAC,MAAM,CAAC;YAChD,MAAM;gBACJ,aAAa,QAAQ,IAAI,CAAC,KAAK;gBAC/B;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF"}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}