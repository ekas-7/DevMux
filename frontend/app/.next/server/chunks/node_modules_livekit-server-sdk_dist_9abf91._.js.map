{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/grants.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { RoomConfiguration } from '@livekit/protocol';\nimport { TrackSource } from '@livekit/protocol';\nimport type { JWTPayload } from 'jose';\n\nexport function trackSourceToString(source: TrackSource) {\n  switch (source) {\n    case TrackSource.CAMERA:\n      return 'camera';\n    case TrackSource.MICROPHONE:\n      return 'microphone';\n    case TrackSource.SCREEN_SHARE:\n      return 'screen_share';\n    case TrackSource.SCREEN_SHARE_AUDIO:\n      return 'screen_share_audio';\n    default:\n      throw new TypeError(`Cannot convert TrackSource ${source} to string`);\n  }\n}\n\nexport function claimsToJwtPayload(\n  grant: ClaimGrants,\n): JWTPayload & { video?: Record<string, unknown> } {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const claim: Record<string, any> = { ...grant };\n  // eslint-disable-next-line no-restricted-syntax\n  if (Array.isArray(claim.video?.canPublishSources)) {\n    claim.video.canPublishSources = claim.video.canPublishSources.map(trackSourceToString);\n  }\n  return claim;\n}\n\nexport interface VideoGrant {\n  /** permission to create a room */\n  roomCreate?: boolean;\n\n  /** permission to join a room as a participant, room must be set */\n  roomJoin?: boolean;\n\n  /** permission to list rooms */\n  roomList?: boolean;\n\n  /** permission to start a recording */\n  roomRecord?: boolean;\n\n  /** permission to control a specific room, room must be set */\n  roomAdmin?: boolean;\n\n  /** name of the room, must be set for admin or join permissions */\n  room?: string;\n\n  /** permissions to control ingress, not specific to any room or ingress */\n  ingressAdmin?: boolean;\n\n  /**\n   * allow participant to publish. If neither canPublish or canSubscribe is set,\n   * both publish and subscribe are enabled\n   */\n  canPublish?: boolean;\n\n  /**\n   * TrackSource types that the participant is allowed to publish\n   * When set, it supersedes CanPublish. Only sources explicitly set here can be published\n   */\n  canPublishSources?: TrackSource[];\n\n  /** allow participant to subscribe to other tracks */\n  canSubscribe?: boolean;\n\n  /**\n   * allow participants to publish data, defaults to true if not set\n   */\n  canPublishData?: boolean;\n\n  /**\n   * by default, a participant is not allowed to update its own metadata\n   */\n  canUpdateOwnMetadata?: boolean;\n\n  /** participant isn't visible to others */\n  hidden?: boolean;\n\n  /** participant is recording the room, when set, allows room to indicate it's being recorded */\n  recorder?: boolean;\n\n  /** participant allowed to connect to LiveKit as Agent Framework worker */\n  agent?: boolean;\n\n  /** allow participant to subscribe to metrics */\n  canSubscribeMetrics?: boolean;\n}\n\nexport interface SIPGrant {\n  /** manage sip resources */\n  admin?: boolean;\n\n  /** make outbound calls */\n  call?: boolean;\n}\n\n/** @internal */\nexport interface ClaimGrants extends JWTPayload {\n  name?: string;\n  video?: VideoGrant;\n  sip?: SIPGrant;\n  kind?: string;\n  metadata?: string;\n  attributes?: Record<string, string>;\n  sha256?: string;\n  roomPreset?: string;\n  roomConfig?: RoomConfiguration;\n}\n"],"names":[],"mappings":";;;;;AAIA,SAAS,mBAAmB;;AAGrB,SAAS,oBAAoB,MAAA,EAAqB;IACvD,OAAQ,QAAQ;QACd,+KAAK,cAAA,CAAY,MAAA;YACf,OAAO;QACT,+KAAK,cAAA,CAAY,UAAA;YACf,OAAO;QACT,+KAAK,cAAA,CAAY,YAAA;YACf,OAAO;QACT,+KAAK,cAAA,CAAY,kBAAA;YACf,OAAO;QACT;YACE,MAAM,IAAI,UAAU,CAAA,2BAAA,EAA8B,MAAM,CAAA,UAAA,CAAY;IACxE;AACF;AAEO,SAAS,mBACd,KAAA,EACkD;IAxBpD,IAAA;IA0BE,MAAM,QAA6B;QAAE,GAAG,KAAA;IAAM;IAE9C,IAAI,MAAM,OAAA,CAAA,CAAQ,KAAA,MAAM,KAAA,KAAN,OAAA,KAAA,IAAA,GAAa,iBAAiB,GAAG;QACjD,MAAM,KAAA,CAAM,iBAAA,GAAoB,MAAM,KAAA,CAAM,iBAAA,CAAkB,GAAA,CAAI,mBAAmB;IACvF;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/AccessToken.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { RoomConfiguration } from '@livekit/protocol';\nimport * as jose from 'jose';\nimport type { ClaimGrants, SIPGrant, VideoGrant } from './grants.js';\nimport { claimsToJwtPayload } from './grants.js';\n\n// 6 hours\nconst defaultTTL = `6h`;\n\nexport interface AccessTokenOptions {\n  /**\n   * amount of time before expiration\n   * expressed in seconds or a string describing a time span zeit/ms.\n   * eg: '2 days', '10h', or seconds as numeric value\n   */\n  ttl?: number | string;\n\n  /**\n   * display name for the participant, available as `Participant.name`\n   */\n  name?: string;\n\n  /**\n   * identity of the user, required for room join tokens\n   */\n  identity?: string;\n\n  /**\n   * custom metadata to be passed to participants\n   */\n  metadata?: string;\n\n  /**\n   * custom attributes to be passed to participants\n   */\n  attributes?: Record<string, string>;\n}\n\nexport class AccessToken {\n  private apiKey: string;\n\n  private apiSecret: string;\n\n  private grants: ClaimGrants;\n\n  identity?: string;\n\n  ttl: number | string;\n\n  /**\n   * Creates a new AccessToken\n   * @param apiKey - API Key, can be set in env LIVEKIT_API_KEY\n   * @param apiSecret - Secret, can be set in env LIVEKIT_API_SECRET\n   */\n  constructor(apiKey?: string, apiSecret?: string, options?: AccessTokenOptions) {\n    if (!apiKey) {\n      apiKey = process.env.LIVEKIT_API_KEY;\n    }\n    if (!apiSecret) {\n      apiSecret = process.env.LIVEKIT_API_SECRET;\n    }\n    if (!apiKey || !apiSecret) {\n      throw Error('api-key and api-secret must be set');\n    }\n    // @ts-expect-error we're not including dom lib for the server sdk so document is not defined\n    else if (typeof document !== 'undefined') {\n      // check against document rather than window because deno provides window\n      console.error(\n        'You should not include your API secret in your web client bundle.\\n\\n' +\n          'Your web client should request a token from your backend server which should then use ' +\n          'the API secret to generate a token. See https://docs.livekit.io/client/connect/',\n      );\n    }\n    this.apiKey = apiKey;\n    this.apiSecret = apiSecret;\n    this.grants = {};\n    this.identity = options?.identity;\n    this.ttl = options?.ttl || defaultTTL;\n    if (typeof this.ttl === 'number') {\n      this.ttl = `${this.ttl}s`;\n    }\n    if (options?.metadata) {\n      this.metadata = options.metadata;\n    }\n    if (options?.attributes) {\n      this.attributes = options.attributes;\n    }\n    if (options?.name) {\n      this.name = options.name;\n    }\n  }\n\n  /**\n   * Adds a video grant to this token.\n   * @param grant -\n   */\n  addGrant(grant: VideoGrant) {\n    this.grants.video = { ...(this.grants.video ?? {}), ...grant };\n  }\n\n  /**\n   * Adds a SIP grant to this token.\n   * @param grant -\n   */\n  addSIPGrant(grant: SIPGrant) {\n    this.grants.sip = { ...(this.grants.sip ?? {}), ...grant };\n  }\n\n  get name(): string | undefined {\n    return this.grants.name;\n  }\n\n  set name(name: string) {\n    this.grants.name = name;\n  }\n\n  get metadata(): string | undefined {\n    return this.grants.metadata;\n  }\n\n  /**\n   * Set metadata to be passed to the Participant, used only when joining the room\n   */\n  set metadata(md: string) {\n    this.grants.metadata = md;\n  }\n\n  get attributes(): Record<string, string> | undefined {\n    return this.grants.attributes;\n  }\n\n  set attributes(attrs: Record<string, string>) {\n    this.grants.attributes = attrs;\n  }\n\n  get kind(): string | undefined {\n    return this.grants.kind;\n  }\n\n  set kind(kind: string) {\n    this.grants.kind = kind;\n  }\n\n  get sha256(): string | undefined {\n    return this.grants.sha256;\n  }\n\n  set sha256(sha: string | undefined) {\n    this.grants.sha256 = sha;\n  }\n\n  get roomPreset(): string | undefined {\n    return this.grants.roomPreset;\n  }\n\n  set roomPreset(preset: string | undefined) {\n    this.grants.roomPreset = preset;\n  }\n\n  get roomConfig(): RoomConfiguration | undefined {\n    return this.grants.roomConfig;\n  }\n\n  set roomConfig(config: RoomConfiguration | undefined) {\n    this.grants.roomConfig = config;\n  }\n\n  /**\n   * @returns JWT encoded token\n   */\n  async toJwt(): Promise<string> {\n    // TODO: check for video grant validity\n\n    const secret = new TextEncoder().encode(this.apiSecret);\n\n    const jwt = new jose.SignJWT(claimsToJwtPayload(this.grants))\n      .setProtectedHeader({ alg: 'HS256' })\n      .setIssuer(this.apiKey)\n      .setExpirationTime(this.ttl)\n      .setNotBefore(0);\n    if (this.identity) {\n      jwt.setSubject(this.identity);\n    } else if (this.grants.video?.roomJoin) {\n      throw Error('identity is required for join but not set');\n    }\n    return jwt.sign(secret);\n  }\n}\n\nexport class TokenVerifier {\n  private apiKey: string;\n\n  private apiSecret: string;\n\n  constructor(apiKey: string, apiSecret: string) {\n    this.apiKey = apiKey;\n    this.apiSecret = apiSecret;\n  }\n\n  async verify(token: string): Promise<ClaimGrants> {\n    const secret = new TextEncoder().encode(this.apiSecret);\n    const { payload } = await jose.jwtVerify(token, secret, { issuer: this.apiKey });\n    if (!payload) {\n      throw Error('invalid token');\n    }\n\n    return payload as ClaimGrants;\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/ServiceBase.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { AccessToken } from './AccessToken.js';\nimport type { SIPGrant, VideoGrant } from './grants.js';\n\n/**\n * Utilities to handle authentication\n */\nexport class ServiceBase {\n  private readonly apiKey?: string;\n\n  private readonly secret?: string;\n\n  private readonly ttl: string;\n\n  /**\n   * @param apiKey - API Key.\n   * @param secret - API Secret.\n   * @param ttl - token TTL\n   */\n  constructor(apiKey?: string, secret?: string, ttl?: string) {\n    this.apiKey = apiKey;\n    this.secret = secret;\n    this.ttl = ttl || '10m';\n  }\n\n  async authHeader(grant: VideoGrant, sip?: SIPGrant): Promise<Record<string, string>> {\n    const at = new AccessToken(this.apiKey, this.secret, { ttl: this.ttl });\n    if (grant) {\n      at.addGrant(grant);\n    }\n    if (sip) {\n      at.addSIPGrant(sip);\n    }\n    return {\n      Authorization: `Bearer ${await at.toJwt()}`,\n    };\n  }\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,mBAAmB;;AAMrB,MAAM,YAAY;IAAA;;;;GAAA,GAYvB,YAAY,MAAA,EAAiB,MAAA,EAAiB,GAAA,CAAc;QAC1D,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,GAAA,GAAM,OAAO;IACpB;IAEA,MAAM,WAAW,KAAA,EAAmB,GAAA,EAAiD;QACnF,MAAM,KAAK,sKAAI,cAAA,CAAY,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,MAAA,EAAQ;YAAE,KAAK,IAAA,CAAK,GAAA;QAAI,CAAC;QACtE,IAAI,OAAO;YACT,GAAG,QAAA,CAAS,KAAK;QACnB;QACA,IAAI,KAAK;YACP,GAAG,WAAA,CAAY,GAAG;QACpB;QACA,OAAO;YACL,eAAe,CAAA,OAAA,EAAU,MAAM,GAAG,KAAA,CAAM,CAAC,EAAA;QAC3C;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/TwirpRPC.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { JsonValue } from '@bufbuild/protobuf';\n\n// twirp RPC adapter for client implementation\n\nconst defaultPrefix = '/twirp';\n\nexport const livekitPackage = 'livekit';\nexport interface Rpc {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  request(service: string, method: string, data: JsonValue, headers?: any): Promise<string>;\n}\n\n/**\n * JSON based Twirp V7 RPC\n */\nexport class TwirpRpc {\n  host: string;\n\n  pkg: string;\n\n  prefix: string;\n\n  constructor(host: string, pkg: string, prefix?: string) {\n    if (host.startsWith('ws')) {\n      host = host.replace('ws', 'http');\n    }\n    this.host = host;\n    this.pkg = pkg;\n    this.prefix = prefix || defaultPrefix;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(service: string, method: string, data: any, headers?: any): Promise<any> {\n    const path = `${this.prefix}/${this.pkg}.${service}/${method}`;\n    const url = new URL(path, this.host);\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=UTF-8',\n        ...headers,\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Request failed with status ${response.status}: ${response.statusText}`);\n    }\n    const parsedResp = (await response.json()) as Record<string, unknown>;\n    const camelcaseKeys = await import('camelcase-keys').then((mod) => mod.default);\n    return camelcaseKeys(parsedResp, { deep: true });\n  }\n}\n"],"names":[],"mappings":";;;;AAOA,MAAM,gBAAgB;AAEf,MAAM,iBAAiB;AASvB,MAAM,SAAS;IAOpB,YAAY,IAAA,EAAc,GAAA,EAAa,MAAA,CAAiB;QACtD,IAAI,KAAK,UAAA,CAAW,IAAI,GAAG;YACzB,OAAO,KAAK,OAAA,CAAQ,MAAM,MAAM;QAClC;QACA,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,GAAA,GAAM;QACX,IAAA,CAAK,MAAA,GAAS,UAAU;IAC1B;IAAA,8DAAA;IAGA,MAAM,QAAQ,OAAA,EAAiB,MAAA,EAAgB,IAAA,EAAW,OAAA,EAA6B;QACrF,MAAM,OAAO,GAAG,IAAA,CAAK,MAAM,CAAA,CAAA,EAAI,IAAA,CAAK,GAAG,CAAA,CAAA,EAAI,OAAO,CAAA,CAAA,EAAI,MAAM,EAAA;QAC5D,MAAM,MAAM,IAAI,IAAI,MAAM,IAAA,CAAK,IAAI;QAEnC,MAAM,WAAW,MAAM,MAAM,KAAK;YAChC,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,GAAG,OAAA;YACL;YACA,MAAM,KAAK,SAAA,CAAU,IAAI;QAC3B,CAAC;QAED,IAAI,CAAC,SAAS,EAAA,EAAI;YAChB,MAAM,IAAI,MAAM,CAAA,2BAAA,EAA8B,SAAS,MAAM,CAAA,EAAA,EAAK,SAAS,UAAU,EAAE;QACzF;QACA,MAAM,aAAc,MAAM,SAAS,IAAA,CAAK;QACxC,MAAM,gBAAgB,MAAM,OAAO,gBAAgB,8GAAE,IAAA,CAAK,CAAC,MAAQ,IAAI,OAAO;QAC9E,OAAO,cAAc,YAAY;YAAE,MAAM;QAAK,CAAC;IACjD;AACF","ignoreList":[0]}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/AgentDispatchClient.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport {\n  AgentDispatch,\n  CreateAgentDispatchRequest,\n  DeleteAgentDispatchRequest,\n  ListAgentDispatchRequest,\n  ListAgentDispatchResponse,\n} from '@livekit/protocol';\nimport { ServiceBase } from './ServiceBase.js';\nimport { type Rpc, TwirpRpc, livekitPackage } from './TwirpRPC.js';\n\ninterface CreateDispatchOptions {\n  // any custom data to send along with the job.\n  // note: this is different from room and participant metadata\n  metadata?: string;\n}\n\nconst svc = 'AgentDispatchService';\n\n/**\n * Client to access Agent APIs\n */\nexport class AgentDispatchClient extends ServiceBase {\n  private readonly rpc: Rpc;\n\n  /**\n   * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'\n   * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY\n   * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET\n   */\n  constructor(host: string, apiKey?: string, secret?: string) {\n    super(apiKey, secret);\n    this.rpc = new TwirpRpc(host, livekitPackage);\n  }\n\n  /**\n   * Create an explicit dispatch for an agent to join a room. To use explicit\n   * dispatch, your agent must be registered with an `agentName`.\n   * @param roomName - name of the room to dispatch to\n   * @param agentName - name of the agent to dispatch\n   * @param options - optional metadata to send along with the dispatch\n   * @returns the dispatch that was created\n   */\n  async createDispatch(\n    roomName: string,\n    agentName: string,\n    options?: CreateDispatchOptions,\n  ): Promise<AgentDispatch> {\n    const req = new CreateAgentDispatchRequest({\n      room: roomName,\n      agentName,\n      metadata: options?.metadata,\n    }).toJson();\n    const data = await this.rpc.request(\n      svc,\n      'CreateDispatch',\n      req,\n      await this.authHeader({ roomAdmin: true, room: roomName }),\n    );\n    return AgentDispatch.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * Delete an explicit dispatch for an agent in a room.\n   * @param dispatchId - id of the dispatch to delete\n   * @param roomName - name of the room the dispatch is for\n   */\n  async deleteDispatch(dispatchId: string, roomName: string): Promise<void> {\n    const req = new DeleteAgentDispatchRequest({\n      dispatchId,\n      room: roomName,\n    }).toJson();\n    await this.rpc.request(\n      svc,\n      'DeleteDispatch',\n      req,\n      await this.authHeader({ roomAdmin: true, room: roomName }),\n    );\n  }\n\n  /**\n   * Get an Agent dispatch by ID\n   * @param dispatchId - id of the dispatch to get\n   * @param roomName - name of the room the dispatch is for\n   * @returns the dispatch that was found, or undefined if not found\n   */\n  async getDispatch(dispatchId: string, roomName: string): Promise<AgentDispatch | undefined> {\n    const req = new ListAgentDispatchRequest({\n      dispatchId,\n      room: roomName,\n    }).toJson();\n    const data = await this.rpc.request(\n      svc,\n      'ListDispatch',\n      req,\n      await this.authHeader({ roomAdmin: true, room: roomName }),\n    );\n    const res = ListAgentDispatchResponse.fromJson(data, { ignoreUnknownFields: true });\n    if (res.agentDispatches.length === 0) {\n      return undefined;\n    }\n    return res.agentDispatches[0];\n  }\n\n  /**\n   * List all agent dispatches for a room\n   * @param roomName - name of the room to list dispatches for\n   * @returns the list of dispatches\n   */\n  async listDispatch(roomName: string): Promise<AgentDispatch[]> {\n    const req = new ListAgentDispatchRequest({\n      room: roomName,\n    }).toJson();\n    const data = await this.rpc.request(\n      svc,\n      'ListDispatch',\n      req,\n      await this.authHeader({ roomAdmin: true, room: roomName }),\n    );\n    const res = ListAgentDispatchResponse.fromJson(data, { ignoreUnknownFields: true });\n    return res.agentDispatches;\n  }\n}\n"],"names":[],"mappings":";;;AAGA;AAOA,SAAS,mBAAmB;AAC5B,SAAmB,UAAU,sBAAsB;;;;;AAQnD,MAAM,MAAM;AAKL,MAAM,8LAA4B,cAAA,CAAY;IAAA;;;;GAAA,GAQnD,YAAY,IAAA,EAAc,MAAA,EAAiB,MAAA,CAAiB;QAC1D,KAAA,CAAM,QAAQ,MAAM;QACpB,IAAA,CAAK,GAAA,GAAM,mKAAI,WAAA,CAAS,qKAAM,iBAAc;IAC9C;IAAA;;;;;;;GAAA,GAUA,MAAM,eACJ,QAAA,EACA,SAAA,EACA,OAAA,EACwB;QACxB,MAAM,MAAM,8KAAI,6BAAA,CAA2B;YACzC,MAAM;YACN;YACA,UAAU,WAAA,OAAA,KAAA,IAAA,QAAS,QAAA;QACrB,CAAC,EAAE,MAAA,CAAO;QACV,MAAM,OAAO,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CAC1B,KACA,kBACA,KACA,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM,MAAM;QAAS,CAAC;QAE3D,iLAAO,gBAAA,CAAc,QAAA,CAAS,MAAM;YAAE,qBAAqB;QAAK,CAAC;IACnE;IAAA;;;;GAAA,GAOA,MAAM,eAAe,UAAA,EAAoB,QAAA,EAAiC;QACxE,MAAM,MAAM,8KAAI,6BAAA,CAA2B;YACzC;YACA,MAAM;QACR,CAAC,EAAE,MAAA,CAAO;QACV,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CACb,KACA,kBACA,KACA,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM,MAAM;QAAS,CAAC;IAE7D;IAAA;;;;;GAAA,GAQA,MAAM,YAAY,UAAA,EAAoB,QAAA,EAAsD;QAC1F,MAAM,MAAM,8KAAI,2BAAA,CAAyB;YACvC;YACA,MAAM;QACR,CAAC,EAAE,MAAA,CAAO;QACV,MAAM,OAAO,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CAC1B,KACA,gBACA,KACA,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM,MAAM;QAAS,CAAC;QAE3D,MAAM,+KAAM,6BAAA,CAA0B,QAAA,CAAS,MAAM;YAAE,qBAAqB;QAAK,CAAC;QAClF,IAAI,IAAI,eAAA,CAAgB,MAAA,KAAW,GAAG;YACpC,OAAO,KAAA;QACT;QACA,OAAO,IAAI,eAAA,CAAgB,CAAC,CAAA;IAC9B;IAAA;;;;GAAA,GAOA,MAAM,aAAa,QAAA,EAA4C;QAC7D,MAAM,MAAM,8KAAI,2BAAA,CAAyB;YACvC,MAAM;QACR,CAAC,EAAE,MAAA,CAAO;QACV,MAAM,OAAO,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CAC1B,KACA,gBACA,KACA,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM,MAAM;QAAS,CAAC;QAE3D,MAAM,gLAAM,4BAAA,CAA0B,QAAA,CAAS,MAAM;YAAE,qBAAqB;QAAK,CAAC;QAClF,OAAO,IAAI,eAAA;IACb;AACF","ignoreList":[0]}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/EgressClient.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type {\n  DirectFileOutput,\n  EncodedFileOutput,\n  EncodingOptions,\n  EncodingOptionsPreset,\n  ImageOutput,\n  SegmentedFileOutput,\n  StreamOutput,\n} from '@livekit/protocol';\nimport {\n  EgressInfo,\n  ListEgressRequest,\n  ListEgressResponse,\n  ParticipantEgressRequest,\n  RoomCompositeEgressRequest,\n  StopEgressRequest,\n  TrackCompositeEgressRequest,\n  TrackEgressRequest,\n  UpdateLayoutRequest,\n  UpdateStreamRequest,\n  WebEgressRequest,\n} from '@livekit/protocol';\nimport { ServiceBase } from './ServiceBase.js';\nimport type { Rpc } from './TwirpRPC.js';\nimport { TwirpRpc, livekitPackage } from './TwirpRPC.js';\n\nconst svc = 'Egress';\n\nexport interface RoomCompositeOptions {\n  /**\n   * egress layout. optional\n   */\n  layout?: string;\n  /**\n   * encoding options or preset. optional\n   */\n  encodingOptions?: EncodingOptionsPreset | EncodingOptions;\n  /**\n   * record audio only. optional\n   */\n  audioOnly?: boolean;\n  /**\n   * record video only. optional\n   */\n  videoOnly?: boolean;\n  /**\n   * custom template url. optional\n   */\n  customBaseUrl?: string;\n}\n\nexport interface WebOptions {\n  /**\n   * encoding options or preset. optional\n   */\n  encodingOptions?: EncodingOptionsPreset | EncodingOptions;\n  /**\n   * record audio only. optional\n   */\n  audioOnly?: boolean;\n  /**\n   * record video only. optional\n   */\n  videoOnly?: boolean;\n  /**\n   * await START_RECORDING chrome log\n   */\n  awaitStartSignal?: boolean;\n}\n\nexport interface ParticipantEgressOptions {\n  /**\n   * true to capture source screenshare and screenshare_audio\n   * false to capture camera and microphone\n   */\n  screenShare?: boolean;\n  /**\n   * encoding options or preset. optional\n   */\n  encodingOptions?: EncodingOptionsPreset | EncodingOptions;\n}\n\nexport interface TrackCompositeOptions {\n  /**\n   * audio track ID\n   */\n  audioTrackId?: string;\n  /**\n   * video track ID\n   */\n  videoTrackId?: string;\n  /**\n   * encoding options or preset. optional\n   */\n  encodingOptions?: EncodingOptionsPreset | EncodingOptions;\n}\n\n/**\n * Used to supply multiple outputs with an egress request\n */\nexport interface EncodedOutputs {\n  file?: EncodedFileOutput | undefined;\n  stream?: StreamOutput | undefined;\n  segments?: SegmentedFileOutput | undefined;\n  images?: ImageOutput | undefined;\n}\n\nexport interface ListEgressOptions {\n  roomName?: string;\n  egressId?: string;\n  active?: boolean;\n}\n\n/**\n * Client to access Egress APIs\n */\nexport class EgressClient extends ServiceBase {\n  private readonly rpc: Rpc;\n\n  /**\n   * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'\n   * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY\n   * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET\n   */\n  constructor(host: string, apiKey?: string, secret?: string) {\n    super(apiKey, secret);\n    this.rpc = new TwirpRpc(host, livekitPackage);\n  }\n\n  /**\n   * @param roomName - room name\n   * @param output - file or stream output\n   * @param opts - RoomCompositeOptions\n   */\n  async startRoomCompositeEgress(\n    roomName: string,\n    output: EncodedOutputs | EncodedFileOutput | StreamOutput | SegmentedFileOutput,\n    opts?: RoomCompositeOptions,\n  ): Promise<EgressInfo>;\n  /**\n   * @deprecated use RoomCompositeOptions instead\n   */\n  async startRoomCompositeEgress(\n    roomName: string,\n    output: EncodedOutputs | EncodedFileOutput | StreamOutput | SegmentedFileOutput,\n    layout?: string,\n    options?: EncodingOptionsPreset | EncodingOptions,\n    audioOnly?: boolean,\n    videoOnly?: boolean,\n    customBaseUrl?: string,\n  ): Promise<EgressInfo>;\n  async startRoomCompositeEgress(\n    roomName: string,\n    output: EncodedOutputs | EncodedFileOutput | StreamOutput | SegmentedFileOutput,\n    optsOrLayout?: RoomCompositeOptions | string,\n    options?: EncodingOptionsPreset | EncodingOptions,\n    audioOnly?: boolean,\n    videoOnly?: boolean,\n    customBaseUrl?: string,\n  ): Promise<EgressInfo> {\n    let layout: string | undefined;\n    if (optsOrLayout !== undefined) {\n      if (typeof optsOrLayout === 'string') {\n        layout = optsOrLayout;\n      } else {\n        const opts = <RoomCompositeOptions>optsOrLayout;\n        layout = opts.layout;\n        options = opts.encodingOptions;\n        audioOnly = opts.audioOnly;\n        videoOnly = opts.videoOnly;\n        customBaseUrl = opts.customBaseUrl;\n      }\n    }\n\n    layout ??= '';\n    audioOnly ??= false;\n    videoOnly ??= false;\n    customBaseUrl ??= '';\n\n    const {\n      output: legacyOutput,\n      options: egressOptions,\n      fileOutputs,\n      streamOutputs,\n      segmentOutputs,\n      imageOutputs,\n    } = this.getOutputParams(output, options);\n\n    const req = new RoomCompositeEgressRequest({\n      roomName,\n      layout,\n      audioOnly,\n      videoOnly,\n      customBaseUrl,\n      output: legacyOutput,\n      options: egressOptions,\n      fileOutputs,\n      streamOutputs,\n      segmentOutputs,\n      imageOutputs,\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'StartRoomCompositeEgress',\n      req,\n      await this.authHeader({ roomRecord: true }),\n    );\n    return EgressInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @param url - url\n   * @param output - file or stream output\n   * @param opts - WebOptions\n   */\n  async startWebEgress(\n    url: string,\n    output: EncodedOutputs | EncodedFileOutput | StreamOutput | SegmentedFileOutput,\n    opts?: WebOptions,\n  ): Promise<EgressInfo> {\n    const audioOnly = opts?.audioOnly || false;\n    const videoOnly = opts?.videoOnly || false;\n    const awaitStartSignal = opts?.awaitStartSignal || false;\n    const {\n      output: legacyOutput,\n      options,\n      fileOutputs,\n      streamOutputs,\n      segmentOutputs,\n      imageOutputs,\n    } = this.getOutputParams(output, opts?.encodingOptions);\n\n    const req = new WebEgressRequest({\n      url,\n      audioOnly,\n      videoOnly,\n      awaitStartSignal,\n      output: legacyOutput,\n      options,\n      fileOutputs,\n      streamOutputs,\n      segmentOutputs,\n      imageOutputs,\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'StartWebEgress',\n      req,\n      await this.authHeader({ roomRecord: true }),\n    );\n    return EgressInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * Export a participant's audio and video tracks,\n   *\n   * @param roomName - room name\n   * @param output - one or more outputs\n   * @param opts - ParticipantEgressOptions\n   */\n  async startParticipantEgress(\n    roomName: string,\n    identity: string,\n    output: EncodedOutputs,\n    opts?: ParticipantEgressOptions,\n  ): Promise<EgressInfo> {\n    const { options, fileOutputs, streamOutputs, segmentOutputs, imageOutputs } =\n      this.getOutputParams(output, opts?.encodingOptions);\n    const req = new ParticipantEgressRequest({\n      roomName,\n      identity,\n      screenShare: opts?.screenShare ?? false,\n      options,\n      fileOutputs,\n      streamOutputs,\n      segmentOutputs,\n      imageOutputs,\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'StartParticipantEgress',\n      req,\n      await this.authHeader({ roomRecord: true }),\n    );\n    return EgressInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @param roomName - room name\n   * @param output - file or stream output\n   * @param opts - TrackCompositeOptions\n   */\n  async startTrackCompositeEgress(\n    roomName: string,\n    output: EncodedOutputs | EncodedFileOutput | StreamOutput | SegmentedFileOutput,\n    opts?: TrackCompositeOptions,\n  ): Promise<EgressInfo>;\n  /**\n   * @deprecated use TrackCompositeOptions instead\n   */\n  async startTrackCompositeEgress(\n    roomName: string,\n    output: EncodedOutputs | EncodedFileOutput | StreamOutput | SegmentedFileOutput,\n    audioTrackId?: string,\n    videoTrackId?: string,\n    options?: EncodingOptionsPreset | EncodingOptions,\n  ): Promise<EgressInfo>;\n  async startTrackCompositeEgress(\n    roomName: string,\n    output: EncodedOutputs | EncodedFileOutput | StreamOutput | SegmentedFileOutput,\n    optsOrAudioTrackId?: TrackCompositeOptions | string,\n    videoTrackId?: string,\n    options?: EncodingOptionsPreset | EncodingOptions,\n  ): Promise<EgressInfo> {\n    let audioTrackId: string | undefined;\n    if (optsOrAudioTrackId !== undefined) {\n      if (typeof optsOrAudioTrackId === 'string') {\n        audioTrackId = optsOrAudioTrackId;\n      } else {\n        const opts = <TrackCompositeOptions>optsOrAudioTrackId;\n        audioTrackId = opts.audioTrackId;\n        videoTrackId = opts.videoTrackId;\n        options = opts.encodingOptions;\n      }\n    }\n\n    audioTrackId ??= '';\n    videoTrackId ??= '';\n\n    const {\n      output: legacyOutput,\n      options: egressOptions,\n      fileOutputs,\n      streamOutputs,\n      segmentOutputs,\n      imageOutputs,\n    } = this.getOutputParams(output, options);\n    const req = new TrackCompositeEgressRequest({\n      roomName,\n      audioTrackId,\n      videoTrackId,\n      output: legacyOutput,\n      options: egressOptions,\n      fileOutputs,\n      streamOutputs,\n      segmentOutputs,\n      imageOutputs,\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'StartTrackCompositeEgress',\n      req,\n      await this.authHeader({ roomRecord: true }),\n    );\n    return EgressInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private isEncodedOutputs(output: any): output is EncodedOutputs {\n    return (\n      (<EncodedOutputs>output).file !== undefined ||\n      (<EncodedOutputs>output).stream !== undefined ||\n      (<EncodedOutputs>output).segments !== undefined ||\n      (<EncodedOutputs>output).images !== undefined\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private isEncodedFileOutput(output: any): output is EncodedFileOutput {\n    return (\n      (<EncodedFileOutput>output).filepath !== undefined ||\n      (<EncodedFileOutput>output).fileType !== undefined\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private isSegmentedFileOutput(output: any): output is SegmentedFileOutput {\n    return (\n      (<SegmentedFileOutput>output).filenamePrefix !== undefined ||\n      (<SegmentedFileOutput>output).playlistName !== undefined ||\n      (<SegmentedFileOutput>output).filenameSuffix !== undefined\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private isStreamOutput(output: any): output is StreamOutput {\n    return (\n      (<StreamOutput>output).protocol !== undefined || (<StreamOutput>output).urls !== undefined\n    );\n  }\n\n  private getOutputParams(\n    output: EncodedOutputs | EncodedFileOutput | StreamOutput | SegmentedFileOutput,\n    opts?: EncodingOptionsPreset | EncodingOptions,\n  ) {\n    let file: EncodedFileOutput | undefined;\n    let fileOutputs: Array<EncodedFileOutput> | undefined;\n    let stream: StreamOutput | undefined;\n    let streamOutputs: Array<StreamOutput> | undefined;\n    let segments: SegmentedFileOutput | undefined;\n    let segmentOutputs: Array<SegmentedFileOutput> | undefined;\n    let imageOutputs: Array<ImageOutput> | undefined;\n\n    if (this.isEncodedOutputs(output)) {\n      if (output.file !== undefined) {\n        fileOutputs = [output.file];\n      }\n      if (output.stream !== undefined) {\n        streamOutputs = [output.stream];\n      }\n      if (output.segments !== undefined) {\n        segmentOutputs = [output.segments];\n      }\n      if (output.images !== undefined) {\n        imageOutputs = [output.images];\n      }\n    } else if (this.isEncodedFileOutput(output)) {\n      file = output;\n      fileOutputs = [file];\n    } else if (this.isSegmentedFileOutput(output)) {\n      segments = output;\n      segmentOutputs = [segments];\n    } else if (this.isStreamOutput(output)) {\n      stream = output;\n      streamOutputs = [stream];\n    }\n\n    let legacyOutput:\n      | {\n          value: EncodedFileOutput;\n          case: 'file';\n        }\n      | {\n          value: StreamOutput;\n          case: 'stream';\n        }\n      | {\n          value: SegmentedFileOutput;\n          case: 'segments';\n        }\n      | undefined;\n\n    if (file) {\n      legacyOutput = {\n        case: 'file',\n        value: file,\n      };\n    } else if (stream) {\n      legacyOutput = {\n        case: 'stream',\n        value: stream,\n      };\n    } else if (segments) {\n      legacyOutput = {\n        case: 'segments',\n        value: segments,\n      };\n    }\n    let egressOptions:\n      | {\n          value: EncodingOptionsPreset;\n          case: 'preset';\n        }\n      | {\n          value: EncodingOptions;\n          case: 'advanced';\n        }\n      | undefined;\n    if (opts) {\n      if (typeof opts === 'number') {\n        egressOptions = {\n          case: 'preset',\n          value: opts,\n        };\n      } else {\n        egressOptions = {\n          case: 'advanced',\n          value: <EncodingOptions>opts,\n        };\n      }\n    }\n\n    return {\n      output: legacyOutput,\n      options: egressOptions,\n      fileOutputs,\n      streamOutputs,\n      segmentOutputs,\n      imageOutputs,\n    };\n  }\n\n  /**\n   * @param roomName - room name\n   * @param output - file or websocket output\n   * @param trackId - track Id\n   */\n  async startTrackEgress(\n    roomName: string,\n    output: DirectFileOutput | string,\n    trackId: string,\n  ): Promise<EgressInfo> {\n    let legacyOutput:\n      | {\n          value: DirectFileOutput;\n          case: 'file';\n        }\n      | {\n          value: string;\n          case: 'websocketUrl';\n        }\n      | undefined;\n\n    if (typeof output === 'string') {\n      legacyOutput = {\n        case: 'websocketUrl',\n        value: output,\n      };\n    } else {\n      legacyOutput = {\n        case: 'file',\n        value: output,\n      };\n    }\n\n    const req = new TrackEgressRequest({\n      roomName,\n      trackId,\n      output: legacyOutput,\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'StartTrackEgress',\n      req,\n      await this.authHeader({ roomRecord: true }),\n    );\n    return EgressInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @param egressId -\n   * @param layout -\n   */\n  async updateLayout(egressId: string, layout: string): Promise<EgressInfo> {\n    const data = await this.rpc.request(\n      svc,\n      'UpdateLayout',\n      new UpdateLayoutRequest({ egressId, layout }).toJson(),\n      await this.authHeader({ roomRecord: true }),\n    );\n    return EgressInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @param egressId -\n   * @param addOutputUrls -\n   * @param removeOutputUrls -\n   */\n  async updateStream(\n    egressId: string,\n    addOutputUrls?: string[],\n    removeOutputUrls?: string[],\n  ): Promise<EgressInfo> {\n    addOutputUrls ??= [];\n    removeOutputUrls ??= [];\n\n    const data = await this.rpc.request(\n      svc,\n      'UpdateStream',\n      new UpdateStreamRequest({ egressId, addOutputUrls, removeOutputUrls }).toJson(),\n      await this.authHeader({ roomRecord: true }),\n    );\n    return EgressInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @param options - options to filter listed Egresses, by default returns all\n   * Egress instances\n   */\n  async listEgress(options?: ListEgressOptions): Promise<Array<EgressInfo>>;\n  /**\n   * @deprecated use `listEgress(options?: ListEgressOptions)` instead\n   * @param roomName - list egress for one room only\n   */\n  async listEgress(roomName?: string): Promise<Array<EgressInfo>>;\n  /**\n   * @param roomName - list egress for one room only\n   */\n  async listEgress(options?: string | ListEgressOptions): Promise<Array<EgressInfo>> {\n    let req: Partial<ListEgressRequest> = {};\n    if (typeof options === 'string') {\n      req.roomName = options;\n    } else if (options !== undefined) {\n      req = options;\n    }\n\n    const data = await this.rpc.request(\n      svc,\n      'ListEgress',\n      new ListEgressRequest(req).toJson(),\n      await this.authHeader({ roomRecord: true }),\n    );\n    return ListEgressResponse.fromJson(data, { ignoreUnknownFields: true }).items ?? [];\n  }\n\n  /**\n   * @param egressId -\n   */\n  async stopEgress(egressId: string): Promise<EgressInfo> {\n    const data = await this.rpc.request(\n      svc,\n      'StopEgress',\n      new StopEgressRequest({ egressId }).toJson(),\n      await this.authHeader({ roomRecord: true }),\n    );\n    return EgressInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 716, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 722, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/IngressClient.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { IngressAudioOptions, IngressInput, IngressVideoOptions } from '@livekit/protocol';\nimport {\n  CreateIngressRequest,\n  DeleteIngressRequest,\n  IngressInfo,\n  ListIngressRequest,\n  ListIngressResponse,\n  UpdateIngressRequest,\n} from '@livekit/protocol';\nimport { ServiceBase } from './ServiceBase.js';\nimport type { Rpc } from './TwirpRPC.js';\nimport { TwirpRpc, livekitPackage } from './TwirpRPC.js';\n\nconst svc = 'Ingress';\n\nexport interface CreateIngressOptions {\n  /**\n   * ingress name. optional\n   */\n  name?: string;\n  /**\n   * name of the room to send media to. required\n   */\n  roomName?: string;\n  /**\n   * unique identity of the participant. required\n   */\n  participantIdentity: string;\n  /**\n   * participant display name\n   */\n  participantName?: string;\n  /**\n   * metadata to attach to the participant\n   */\n  participantMetadata?: string;\n  /**\n   * @deprecated use `enableTranscoding` instead.\n   * whether to skip transcoding and forward the input media directly. Only supported by WHIP\n   */\n  bypassTranscoding?: boolean;\n  /**\n   * whether to enable transcoding or forward the input media directly.\n   * Transcoding is required for all input types except WHIP. For WHIP, the default is to not transcode.\n   */\n  enableTranscoding?: boolean | undefined;\n  /**\n   * url of the media to pull for ingresses of type URL\n   */\n  url?: string;\n  /**\n   * custom audio encoding parameters. optional\n   */\n  audio?: IngressAudioOptions;\n  /**\n   * custom video encoding parameters. optional\n   */\n  video?: IngressVideoOptions;\n}\n\nexport interface UpdateIngressOptions {\n  /**\n   * ingress name. optional\n   */\n  name: string;\n  /**\n   * name of the room to send media to.\n   */\n  roomName?: string;\n  /**\n   * unique identity of the participant.\n   */\n  participantIdentity?: string;\n  /**\n   * participant display name\n   */\n  participantName?: string;\n  /**\n   * metadata to attach to the participant\n   */\n  participantMetadata?: string;\n  /**\n   * @deprecated use `enableTranscoding` instead\n   * whether to skip transcoding and forward the input media directly. Only supported by WHIP\n   */\n  bypassTranscoding?: boolean | undefined;\n  /**\n   * whether to enable transcoding or forward the input media directly.\n   * Transcoding is required for all input types except WHIP. For WHIP, the default is to not transcode.\n   */\n  enableTranscoding?: boolean | undefined;\n  /**\n   * custom audio encoding parameters. optional\n   */\n  audio?: IngressAudioOptions;\n  /**\n   * custom video encoding parameters. optional\n   */\n  video?: IngressVideoOptions;\n}\n\nexport interface ListIngressOptions {\n  /**\n   * list ingress for one room only\n   */\n  roomName?: string;\n\n  /**\n   * list ingress by ID\n   */\n  ingressId?: string;\n}\n\n/**\n * Client to access Ingress APIs\n */\nexport class IngressClient extends ServiceBase {\n  private readonly rpc: Rpc;\n\n  /**\n   * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'\n   * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY\n   * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET\n   */\n  constructor(host: string, apiKey?: string, secret?: string) {\n    super(apiKey, secret);\n    this.rpc = new TwirpRpc(host, livekitPackage);\n  }\n\n  /**\n   * @param inputType - protocol for the ingress\n   * @param opts - CreateIngressOptions\n   */\n  async createIngress(inputType: IngressInput, opts: CreateIngressOptions): Promise<IngressInfo> {\n    let name: string = '';\n    let participantName: string = '';\n    let participantIdentity: string = '';\n    let bypassTranscoding: boolean = false;\n    let url: string = '';\n\n    if (opts == null) {\n      throw new Error('options dictionary is required');\n    }\n\n    const roomName: string | undefined = opts.roomName;\n    const enableTranscoding: boolean | undefined = opts.enableTranscoding;\n    const audio: IngressAudioOptions | undefined = opts.audio;\n    const video: IngressVideoOptions | undefined = opts.video;\n    const participantMetadata: string | undefined = opts.participantMetadata;\n\n    name = opts.name || '';\n    participantName = opts.participantName || '';\n    participantIdentity = opts.participantIdentity || '';\n    bypassTranscoding = opts.bypassTranscoding || false;\n    url = opts.url || '';\n\n    if (typeof roomName == 'undefined') {\n      throw new Error('required roomName option not provided');\n    }\n\n    if (participantIdentity == '') {\n      throw new Error('required participantIdentity option not provided');\n    }\n\n    const req = new CreateIngressRequest({\n      inputType,\n      name,\n      roomName,\n      participantIdentity,\n      participantMetadata,\n      participantName,\n      bypassTranscoding,\n      enableTranscoding,\n      url,\n      audio,\n      video,\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'CreateIngress',\n      req,\n      await this.authHeader({ ingressAdmin: true }),\n    );\n    return IngressInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @param ingressId - ID of the ingress to update\n   * @param opts - UpdateIngressOptions\n   */\n  async updateIngress(ingressId: string, opts: UpdateIngressOptions): Promise<IngressInfo> {\n    const name: string = opts.name || '';\n    const roomName: string = opts.roomName || '';\n    const participantName: string = opts.participantName || '';\n    const participantIdentity: string = opts.participantIdentity || '';\n    const { participantMetadata } = opts;\n    const { audio, video, bypassTranscoding, enableTranscoding } = opts;\n\n    const req = new UpdateIngressRequest({\n      ingressId,\n      name,\n      roomName,\n      participantIdentity,\n      participantName,\n      participantMetadata,\n      bypassTranscoding,\n      enableTranscoding,\n      audio,\n      video,\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'UpdateIngress',\n      req,\n      await this.authHeader({ ingressAdmin: true }),\n    );\n    return IngressInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @deprecated use `listIngress(opts)` or `listIngress(arg)` instead\n   * @param roomName - list ingress for one room only\n   */\n  async listIngress(roomName?: string): Promise<Array<IngressInfo>>;\n  /**\n   * @param opts - list options\n   */\n  async listIngress(opts?: ListIngressOptions): Promise<Array<IngressInfo>>;\n  /**\n   * @param arg - list room name or options\n   */\n  async listIngress(arg?: string | ListIngressOptions): Promise<Array<IngressInfo>> {\n    let req: Partial<ListIngressRequest> = {};\n    if (typeof arg === 'string') {\n      req.roomName = arg;\n    } else if (arg) {\n      req = arg;\n    }\n    const data = await this.rpc.request(\n      svc,\n      'ListIngress',\n      new ListIngressRequest(req).toJson(),\n      await this.authHeader({ ingressAdmin: true }),\n    );\n    return ListIngressResponse.fromJson(data, { ignoreUnknownFields: true }).items ?? [];\n  }\n\n  /**\n   * @param ingressId - ingress to delete\n   */\n  async deleteIngress(ingressId: string): Promise<IngressInfo> {\n    const data = await this.rpc.request(\n      svc,\n      'DeleteIngress',\n      new DeleteIngressRequest({ ingressId }).toJson(),\n      await this.authHeader({ ingressAdmin: true }),\n    );\n    return IngressInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 850, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 856, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/RoomServiceClient.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { DataPacket_Kind, RoomEgress, TrackInfo } from '@livekit/protocol';\nimport {\n  CreateRoomRequest,\n  DeleteRoomRequest,\n  ListParticipantsRequest,\n  ListParticipantsResponse,\n  ListRoomsRequest,\n  ListRoomsResponse,\n  MuteRoomTrackRequest,\n  MuteRoomTrackResponse,\n  ParticipantInfo,\n  ParticipantPermission,\n  Room,\n  RoomParticipantIdentity,\n  SendDataRequest,\n  UpdateParticipantRequest,\n  UpdateRoomMetadataRequest,\n  UpdateSubscriptionsRequest,\n} from '@livekit/protocol';\nimport { ServiceBase } from './ServiceBase.js';\nimport type { Rpc } from './TwirpRPC.js';\nimport { TwirpRpc, livekitPackage } from './TwirpRPC.js';\n\n/**\n * Options for when creating a room\n */\nexport interface CreateOptions {\n  /**\n   * name of the room. required\n   */\n  name: string;\n\n  /**\n   * number of seconds to keep the room open before any participant joins\n   */\n  emptyTimeout?: number;\n\n  /**\n   * number of seconds to keep the room open after the last participant leaves\n   * this option is helpful to give a grace period for participants to re-join\n   */\n  departureTimeout?: number;\n\n  /**\n   * limit to the number of participants in a room at a time\n   */\n  maxParticipants?: number;\n\n  /**\n   * initial room metadata\n   */\n  metadata?: string;\n\n  /**\n   * add egress options\n   */\n  egress?: RoomEgress;\n\n  /**\n   * minimum playout delay in milliseconds\n   */\n  minPlayoutDelay?: number;\n\n  /**\n   * maximum playout delay in milliseconds\n   */\n  maxPlayoutDelay?: number;\n\n  /**\n   * improves A/V sync when min_playout_delay set to a value larger than 200ms.\n   * It will disables transceiver re-use -- this option is not recommended\n   * for rooms with frequent subscription changes\n   */\n  syncStreams?: boolean;\n\n  /**\n   * override the node room is allocated to, for debugging\n   * does not work with Cloud\n   */\n  nodeId?: string;\n}\n\nexport type SendDataOptions = {\n  /** If set, only deliver to listed participant identities */\n  destinationIdentities?: string[];\n  destinationSids?: string[];\n  topic?: string;\n};\n\nexport type UpdateParticipantOptions = {\n  /** only attributes you'd want to update should be set, set value to empty string to remove it */\n  attributes?: { [key: string]: string };\n  metadata?: string;\n  /** permissions are updated atomically - all desired permissions would need to be set */\n  permission?: Partial<ParticipantPermission>;\n  name?: string;\n};\n\nconst svc = 'RoomService';\n\n/**\n * Client to access Room APIs\n */\nexport class RoomServiceClient extends ServiceBase {\n  private readonly rpc: Rpc;\n\n  /**\n   *\n   * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'\n   * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY\n   * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET\n   */\n  constructor(host: string, apiKey?: string, secret?: string) {\n    super(apiKey, secret);\n    this.rpc = new TwirpRpc(host, livekitPackage);\n  }\n\n  /**\n   * Creates a new room. Explicit room creation is not required, since rooms will\n   * be automatically created when the first participant joins. This method can be\n   * used to customize room settings.\n   * @param options -\n   */\n  async createRoom(options: CreateOptions): Promise<Room> {\n    const data = await this.rpc.request(\n      svc,\n      'CreateRoom',\n      new CreateRoomRequest(options).toJson(),\n      await this.authHeader({ roomCreate: true }),\n    );\n    return Room.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * List active rooms\n   * @param names - when undefined or empty, list all rooms.\n   *                otherwise returns rooms with matching names\n   * @returns\n   */\n  async listRooms(names?: string[]): Promise<Room[]> {\n    const data = await this.rpc.request(\n      svc,\n      'ListRooms',\n      new ListRoomsRequest({ names: names ?? [] }).toJson(),\n      await this.authHeader({ roomList: true }),\n    );\n    const res = ListRoomsResponse.fromJson(data, { ignoreUnknownFields: true });\n    return res.rooms ?? [];\n  }\n\n  async deleteRoom(room: string): Promise<void> {\n    await this.rpc.request(\n      svc,\n      'DeleteRoom',\n      new DeleteRoomRequest({ room }).toJson(),\n      await this.authHeader({ roomCreate: true }),\n    );\n  }\n\n  /**\n   * Update metadata of a room\n   * @param room - name of the room\n   * @param metadata - the new metadata for the room\n   */\n  async updateRoomMetadata(room: string, metadata: string) {\n    const data = await this.rpc.request(\n      svc,\n      'UpdateRoomMetadata',\n      new UpdateRoomMetadataRequest({ room, metadata }).toJson(),\n      await this.authHeader({ roomAdmin: true, room }),\n    );\n    return Room.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * List participants in a room\n   * @param room - name of the room\n   */\n  async listParticipants(room: string): Promise<ParticipantInfo[]> {\n    const data = await this.rpc.request(\n      svc,\n      'ListParticipants',\n      new ListParticipantsRequest({ room }).toJson(),\n      await this.authHeader({ roomAdmin: true, room }),\n    );\n    const res = ListParticipantsResponse.fromJson(data, { ignoreUnknownFields: true });\n    return res.participants ?? [];\n  }\n\n  /**\n   * Get information on a specific participant, including the tracks that participant\n   * has published\n   * @param room - name of the room\n   * @param identity - identity of the participant to return\n   */\n  async getParticipant(room: string, identity: string): Promise<ParticipantInfo> {\n    const data = await this.rpc.request(\n      svc,\n      'GetParticipant',\n      new RoomParticipantIdentity({ room, identity }).toJson(),\n      await this.authHeader({ roomAdmin: true, room }),\n    );\n\n    return ParticipantInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * Removes a participant in the room. This will disconnect the participant\n   * and will emit a Disconnected event for that participant.\n   * Even after being removed, the participant can still re-join the room.\n   * @param room -\n   * @param identity -\n   */\n  async removeParticipant(room: string, identity: string): Promise<void> {\n    await this.rpc.request(\n      svc,\n      'RemoveParticipant',\n      new RoomParticipantIdentity({ room, identity }).toJson(),\n      await this.authHeader({ roomAdmin: true, room }),\n    );\n  }\n\n  /**\n   * Mutes a track that the participant has published.\n   * @param room -\n   * @param identity -\n   * @param trackSid - sid of the track to be muted\n   * @param muted - true to mute, false to unmute\n   */\n  async mutePublishedTrack(\n    room: string,\n    identity: string,\n    trackSid: string,\n    muted: boolean,\n  ): Promise<TrackInfo> {\n    const req = new MuteRoomTrackRequest({\n      room,\n      identity,\n      trackSid,\n      muted,\n    }).toJson();\n    const data = await this.rpc.request(\n      svc,\n      'MutePublishedTrack',\n      req,\n      await this.authHeader({ roomAdmin: true, room }),\n    );\n    const res = MuteRoomTrackResponse.fromJson(data, { ignoreUnknownFields: true });\n    return res.track!;\n  }\n\n  /**\n   * Updates a participant's state or permissions\n   * @param room - target room\n   * @param identity - participant identity\n   * @param options - participant fields to update\n   */\n  async updateParticipant(\n    room: string,\n    identity: string,\n    options: UpdateParticipantOptions,\n  ): Promise<ParticipantInfo>;\n  /**\n   * Updates a participant's state or permissions\n   * @param room - target room\n   * @param identity - participant identity\n   * @param options - participant fields to update\n   */\n  async updateParticipant(\n    room: string,\n    identity: string,\n    metadata?: string,\n    permission?: Partial<ParticipantPermission>,\n    name?: string,\n  ): Promise<ParticipantInfo>;\n  async updateParticipant(\n    room: string,\n    identity: string,\n    metadataOrOptions?: string | UpdateParticipantOptions,\n    maybePermission?: Partial<ParticipantPermission>,\n    maybeName?: string,\n  ): Promise<ParticipantInfo> {\n    const hasOptions = typeof metadataOrOptions === 'object';\n    const metadata = hasOptions ? metadataOrOptions?.metadata : metadataOrOptions;\n    const permission = hasOptions ? metadataOrOptions.permission : maybePermission;\n    const name = hasOptions ? metadataOrOptions.name : maybeName;\n    const attributes: Record<string, string> | undefined = hasOptions\n      ? metadataOrOptions.attributes\n      : {};\n\n    const req = new UpdateParticipantRequest({\n      room,\n      identity,\n      attributes,\n      metadata,\n      name,\n    });\n    if (permission) {\n      req.permission = new ParticipantPermission(permission);\n    }\n    const data = await this.rpc.request(\n      svc,\n      'UpdateParticipant',\n      req.toJson(),\n      await this.authHeader({ roomAdmin: true, room }),\n    );\n    return ParticipantInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * Updates a participant's subscription to tracks\n   * @param room -\n   * @param identity -\n   * @param trackSids -\n   * @param subscribe - true to subscribe, false to unsubscribe\n   */\n  async updateSubscriptions(\n    room: string,\n    identity: string,\n    trackSids: string[],\n    subscribe: boolean,\n  ): Promise<void> {\n    const req = new UpdateSubscriptionsRequest({\n      room,\n      identity,\n      trackSids,\n      subscribe,\n      participantTracks: [],\n    }).toJson();\n    await this.rpc.request(\n      svc,\n      'UpdateSubscriptions',\n      req,\n      await this.authHeader({ roomAdmin: true, room }),\n    );\n  }\n\n  /**\n   * Sends data message to participants in the room\n   * @param room -\n   * @param data - opaque payload to send\n   * @param kind - delivery reliability\n   * @param options - optionally specify a topic and destinationSids (when destinationSids is empty, message is sent to everyone)\n   */\n  async sendData(\n    room: string,\n    data: Uint8Array,\n    kind: DataPacket_Kind,\n    options: SendDataOptions,\n  ): Promise<void>;\n  /**\n   * Sends data message to participants in the room\n   * @deprecated use sendData(room, data, kind, options) instead\n   * @param room -\n   * @param data - opaque payload to send\n   * @param kind - delivery reliability\n   * @param destinationSids - optional. when empty, message is sent to everyone\n   */\n  async sendData(\n    room: string,\n    data: Uint8Array,\n    kind: DataPacket_Kind,\n    destinationSids?: string[],\n  ): Promise<void>;\n  async sendData(\n    room: string,\n    data: Uint8Array,\n    kind: DataPacket_Kind,\n    options: SendDataOptions | string[] = {},\n  ): Promise<void> {\n    const destinationSids = Array.isArray(options) ? options : options.destinationSids;\n    const topic = Array.isArray(options) ? undefined : options.topic;\n    const req = new SendDataRequest({\n      room,\n      data,\n      kind,\n      destinationSids: destinationSids ?? [],\n      topic,\n    });\n    if (!Array.isArray(options) && options.destinationIdentities) {\n      req.destinationIdentities = options.destinationIdentities;\n    }\n    await this.rpc.request(\n      svc,\n      'SendData',\n      req.toJson(),\n      await this.authHeader({ roomAdmin: true, room }),\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAsBA,SAAS,mBAAmB;AAE5B,SAAS,UAAU,sBAAsB;AApBzC;;;;AAiGA,MAAM,MAAM;AAKL,MAAM,4LAA0B,cAAA,CAAY;IAAA;;;;;GAAA,GASjD,YAAY,IAAA,EAAc,MAAA,EAAiB,MAAA,CAAiB;QAC1D,KAAA,CAAM,QAAQ,MAAM;QACpB,IAAA,CAAK,GAAA,GAAM,IAAI,0KAAA,CAAS,qKAAM,iBAAc;IAC9C;IAAA;;;;;GAAA,GAQA,MAAM,WAAW,OAAA,EAAuC;QACtD,MAAM,OAAO,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CAC1B,KACA,cACA,8KAAI,oBAAA,CAAkB,OAAO,EAAE,MAAA,CAAO,GACtC,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,YAAY;QAAK,CAAC;QAE5C,iLAAO,OAAA,CAAK,QAAA,CAAS,MAAM;YAAE,qBAAqB;QAAK,CAAC;IAC1D;IAAA;;;;;GAAA,GAQA,MAAM,UAAU,KAAA,EAAmC;QACjD,MAAM,OAAO,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CAC1B,KACA,aACA,8KAAI,mBAAA,CAAiB;YAAE,OAAO,SAAS,CAAC,CAAA;QAAE,CAAC,EAAE,MAAA,CAAO,GACpD,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,UAAU;QAAK,CAAC;QAE1C,MAAM,gLAAM,oBAAA,CAAkB,QAAA,CAAS,MAAM;YAAE,qBAAqB;QAAK,CAAC;QAC1E,OAAO,IAAI,KAAA,IAAS,CAAC,CAAA;IACvB;IAEA,MAAM,WAAW,IAAA,EAA6B;QAC5C,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CACb,KACA,cACA,8KAAI,oBAAA,CAAkB;YAAE;QAAK,CAAC,EAAE,MAAA,CAAO,GACvC,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,YAAY;QAAK,CAAC;IAE9C;IAAA;;;;GAAA,GAOA,MAAM,mBAAmB,IAAA,EAAc,QAAA,EAAkB;QACvD,MAAM,OAAO,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CAC1B,KACA,sBACA,6KAAI,6BAAA,CAA0B;YAAE;YAAM;QAAS,CAAC,EAAE,MAAA,CAAO,GACzD,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM;QAAK,CAAC;QAEjD,OAAO,iLAAA,CAAK,QAAA,CAAS,MAAM;YAAE,qBAAqB;QAAK,CAAC;IAC1D;IAAA;;;GAAA,GAMA,MAAM,iBAAiB,IAAA,EAA0C;QAC/D,MAAM,OAAO,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CAC1B,KACA,oBACA,8KAAI,0BAAA,CAAwB;YAAE;QAAK,CAAC,EAAE,MAAA,CAAO,GAC7C,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM;QAAK,CAAC;QAEjD,MAAM,MAAM,qMAAA,CAAyB,QAAA,CAAS,MAAM;YAAE,qBAAqB;QAAK,CAAC;QACjF,OAAO,IAAI,YAAA,IAAgB,CAAC,CAAA;IAC9B;IAAA;;;;;GAAA,GAQA,MAAM,eAAe,IAAA,EAAc,QAAA,EAA4C;QAC7E,MAAM,OAAO,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CAC1B,KACA,kBACA,8KAAI,0BAAA,CAAwB;YAAE;YAAM;QAAS,CAAC,EAAE,MAAA,CAAO,GACvD,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM;QAAK,CAAC;QAGjD,iLAAO,kBAAA,CAAgB,QAAA,CAAS,MAAM;YAAE,qBAAqB;QAAK,CAAC;IACrE;IAAA;;;;;;GAAA,GASA,MAAM,kBAAkB,IAAA,EAAc,QAAA,EAAiC;QACrE,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CACb,KACA,qBACA,6KAAI,2BAAA,CAAwB;YAAE;YAAM;QAAS,CAAC,EAAE,MAAA,CAAO,GACvD,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM;QAAK,CAAC;IAEnD;IAAA;;;;;;GAAA,GASA,MAAM,mBACJ,IAAA,EACA,QAAA,EACA,QAAA,EACA,KAAA,EACoB;QACpB,MAAM,MAAM,IAAI,iMAAA,CAAqB;YACnC;YACA;YACA;YACA;QACF,CAAC,EAAE,MAAA,CAAO;QACV,MAAM,OAAO,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CAC1B,KACA,sBACA,KACA,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM;QAAK,CAAC;QAEjD,MAAM,gLAAM,wBAAA,CAAsB,QAAA,CAAS,MAAM;YAAE,qBAAqB;QAAK,CAAC;QAC9E,OAAO,IAAI,KAAA;IACb;IA0BA,MAAM,kBACJ,IAAA,EACA,QAAA,EACA,iBAAA,EACA,eAAA,EACA,SAAA,EAC0B;QAC1B,MAAM,aAAa,OAAO,sBAAsB;QAChD,MAAM,WAAW,aAAa,qBAAA,OAAA,KAAA,IAAA,kBAAmB,QAAA,GAAW;QAC5D,MAAM,aAAa,aAAa,kBAAkB,UAAA,GAAa;QAC/D,MAAM,OAAO,aAAa,kBAAkB,IAAA,GAAO;QACnD,MAAM,aAAiD,aACnD,kBAAkB,UAAA,GAClB,CAAC;QAEL,MAAM,MAAM,8KAAI,2BAAA,CAAyB;YACvC;YACA;YACA;YACA;YACA;QACF,CAAC;QACD,IAAI,YAAY;YACd,IAAI,UAAA,GAAa,8KAAI,wBAAA,CAAsB,UAAU;QACvD;QACA,MAAM,OAAO,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CAC1B,KACA,qBACA,IAAI,MAAA,CAAO,GACX,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM;QAAK,CAAC;QAEjD,iLAAO,kBAAA,CAAgB,QAAA,CAAS,MAAM;YAAE,qBAAqB;QAAK,CAAC;IACrE;IAAA;;;;;;GAAA,GASA,MAAM,oBACJ,IAAA,EACA,QAAA,EACA,SAAA,EACA,SAAA,EACe;QACf,MAAM,MAAM,8KAAI,6BAAA,CAA2B;YACzC;YACA;YACA;YACA;YACA,mBAAmB,CAAC,CAAA;QACtB,CAAC,EAAE,MAAA,CAAO;QACV,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CACb,KACA,uBACA,KACA,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM;QAAK,CAAC;IAEnD;IA6BA,MAAM,SACJ,IAAA,EACA,IAAA,EACA,IAAA,EACA,UAAsC,CAAC,CAAA,EACxB;QACf,MAAM,kBAAkB,MAAM,OAAA,CAAQ,OAAO,IAAI,UAAU,QAAQ,eAAA;QACnE,MAAM,QAAQ,MAAM,OAAA,CAAQ,OAAO,IAAI,KAAA,IAAY,QAAQ,KAAA;QAC3D,MAAM,MAAM,8KAAI,kBAAA,CAAgB;YAC9B;YACA;YACA;YACA,iBAAiB,mBAAmB,CAAC,CAAA;YACrC;QACF,CAAC;QACD,IAAI,CAAC,MAAM,OAAA,CAAQ,OAAO,KAAK,QAAQ,qBAAA,EAAuB;YAC5D,IAAI,qBAAA,GAAwB,QAAQ,qBAAA;QACtC;QACA,MAAM,IAAA,CAAK,GAAA,CAAI,OAAA,CACb,KACA,YACA,IAAI,MAAA,CAAO,GACX,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;YAAM;QAAK,CAAC;IAEnD;AACF","ignoreList":[0]}},
    {"offset": {"line": 1062, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1068, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/SipClient.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport { Duration } from '@bufbuild/protobuf';\nimport type { RoomConfiguration, SIPHeaderOptions } from '@livekit/protocol';\nimport {\n  CreateSIPDispatchRuleRequest,\n  CreateSIPInboundTrunkRequest,\n  CreateSIPOutboundTrunkRequest,\n  CreateSIPParticipantRequest,\n  CreateSIPTrunkRequest,\n  DeleteSIPDispatchRuleRequest,\n  DeleteSIPTrunkRequest,\n  ListSIPDispatchRuleRequest,\n  ListSIPDispatchRuleResponse,\n  ListSIPInboundTrunkRequest,\n  ListSIPInboundTrunkResponse,\n  ListSIPOutboundTrunkRequest,\n  ListSIPOutboundTrunkResponse,\n  ListSIPTrunkRequest,\n  ListSIPTrunkResponse,\n  SIPDispatchRule,\n  SIPDispatchRuleDirect,\n  SIPDispatchRuleIndividual,\n  SIPDispatchRuleInfo,\n  SIPInboundTrunkInfo,\n  SIPOutboundTrunkInfo,\n  SIPParticipantInfo,\n  SIPTransport,\n  SIPTrunkInfo,\n  TransferSIPParticipantRequest,\n} from '@livekit/protocol';\nimport { ServiceBase } from './ServiceBase.js';\nimport type { Rpc } from './TwirpRPC.js';\nimport { TwirpRpc, livekitPackage } from './TwirpRPC.js';\n\nconst svc = 'SIP';\n\n/**\n * @deprecated use CreateSipInboundTrunkOptions or CreateSipOutboundTrunkOptions\n */\nexport interface CreateSipTrunkOptions {\n  name?: string;\n  metadata?: string;\n  inbound_addresses?: string[];\n  inbound_numbers?: string[];\n  inbound_username?: string;\n  inbound_password?: string;\n  outbound_address?: string;\n  outbound_username?: string;\n  outbound_password?: string;\n}\nexport interface CreateSipInboundTrunkOptions {\n  metadata?: string;\n  /** @deprecated - use `allowedAddresses` instead */\n  allowed_addresses?: string[];\n  allowedAddresses?: string[];\n  /** @deprecated - use `allowedNumbers` instead */\n  allowed_numbers?: string[];\n  allowedNumbers?: string[];\n  /** @deprecated - use `authUsername` instead */\n  auth_username?: string;\n  authUsername?: string;\n  /** @deprecated - use `authPassword` instead */\n  auth_password?: string;\n  authPassword?: string;\n  headers?: { [key: string]: string };\n  headersToAttributes?: { [key: string]: string };\n  // Map SIP response headers from INVITE to sip.h.* participant attributes automatically.\n  includeHeaders?: SIPHeaderOptions;\n  krispEnabled?: boolean;\n}\nexport interface CreateSipOutboundTrunkOptions {\n  metadata?: string;\n  transport: SIPTransport;\n  /** @deprecated - use `authUsername` instead */\n  auth_username?: string;\n  authUsername?: string;\n  /** @deprecated - use `authPassword` instead */\n  auth_password?: string;\n  authPassword?: string;\n  headers?: { [key: string]: string };\n  headersToAttributes?: { [key: string]: string };\n  // Map SIP response headers from INVITE to sip.h.* participant attributes automatically.\n  includeHeaders?: SIPHeaderOptions;\n}\n\nexport interface SipDispatchRuleDirect {\n  type: 'direct';\n  roomName: string;\n  pin?: string;\n}\n\nexport interface SipDispatchRuleIndividual {\n  type: 'individual';\n  roomPrefix: string;\n  pin?: string;\n}\n\nexport interface CreateSipDispatchRuleOptions {\n  name?: string;\n  metadata?: string;\n  trunkIds?: string[];\n  hidePhoneNumber?: boolean;\n  attributes?: { [key: string]: string };\n  roomPreset?: string;\n  roomConfig?: RoomConfiguration;\n}\n\nexport interface CreateSipParticipantOptions {\n  participantIdentity?: string;\n  participantName?: string;\n  participantMetadata?: string;\n  participantAttributes?: { [key: string]: string };\n  dtmf?: string;\n  /** @deprecated - use `playDialtone` instead */\n  playRingtone?: boolean; // Deprecated, use playDialtone instead\n  playDialtone?: boolean;\n  // These headers are sent as-is and may help identify this call as coming from LiveKit for the other SIP endpoint.\n  headers?: { [key: string]: string };\n  // Map SIP response headers from INVITE to sip.h.* participant attributes automatically.\n  includeHeaders?: SIPHeaderOptions;\n  hidePhoneNumber?: boolean;\n  ringingTimeout?: number; // Duration in seconds\n  maxCallDuration?: number; // Duration in seconds\n  enableKrisp?: boolean;\n}\n\nexport interface TransferSipParticipantOptions {\n  playDialtone?: boolean;\n  headers?: { [key: string]: string };\n}\n\n/**\n * Client to access Egress APIs\n */\nexport class SipClient extends ServiceBase {\n  private readonly rpc: Rpc;\n\n  /**\n   * @param host - hostname including protocol. i.e. 'https://<project>.livekit.cloud'\n   * @param apiKey - API Key, can be set in env var LIVEKIT_API_KEY\n   * @param secret - API Secret, can be set in env var LIVEKIT_API_SECRET\n   */\n  constructor(host: string, apiKey?: string, secret?: string) {\n    super(apiKey, secret);\n    this.rpc = new TwirpRpc(host, livekitPackage);\n  }\n\n  /**\n   * @param number - phone number of the trunk\n   * @param opts - CreateSipTrunkOptions\n   * @deprecated use `createSipInboundTrunk` or `createSipOutboundTrunk`\n   */\n  async createSipTrunk(number: string, opts?: CreateSipTrunkOptions): Promise<SIPTrunkInfo> {\n    let inboundAddresses: string[] | undefined;\n    let inboundNumbers: string[] | undefined;\n    let inboundUsername: string = '';\n    let inboundPassword: string = '';\n    let outboundAddress: string = '';\n    let outboundUsername: string = '';\n    let outboundPassword: string = '';\n    let name: string = '';\n    let metadata: string = '';\n\n    if (opts !== undefined) {\n      inboundAddresses = opts.inbound_addresses;\n      inboundNumbers = opts.inbound_numbers;\n      inboundUsername = opts.inbound_username || '';\n      inboundPassword = opts.inbound_password || '';\n      outboundAddress = opts.outbound_address || '';\n      outboundUsername = opts.outbound_username || '';\n      outboundPassword = opts.outbound_password || '';\n      name = opts.name || '';\n      metadata = opts.metadata || '';\n    }\n\n    const req = new CreateSIPTrunkRequest({\n      name: name,\n      metadata: metadata,\n      inboundAddresses: inboundAddresses,\n      inboundNumbers: inboundNumbers,\n      inboundUsername: inboundUsername,\n      inboundPassword: inboundPassword,\n      outboundNumber: number,\n      outboundAddress: outboundAddress,\n      outboundUsername: outboundUsername,\n      outboundPassword: outboundPassword,\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'CreateSIPTrunk',\n      req,\n      await this.authHeader({}, { admin: true }),\n    );\n    return SIPTrunkInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @param name - human-readable name of the trunk\n   * @param numbers - phone numbers of the trunk\n   * @param opts - CreateSipTrunkOptions\n   */\n  async createSipInboundTrunk(\n    name: string,\n    numbers: string[],\n    opts?: CreateSipInboundTrunkOptions,\n  ): Promise<SIPInboundTrunkInfo> {\n    if (opts === undefined) {\n      opts = {};\n    }\n    const req = new CreateSIPInboundTrunkRequest({\n      trunk: new SIPInboundTrunkInfo({\n        name: name,\n        numbers: numbers,\n        metadata: opts?.metadata,\n        allowedAddresses: opts.allowedAddresses ?? opts.allowed_addresses,\n        allowedNumbers: opts.allowedNumbers ?? opts.allowed_numbers,\n        authUsername: opts.authUsername ?? opts.auth_username,\n        authPassword: opts.authPassword ?? opts.auth_password,\n        headers: opts.headers,\n        headersToAttributes: opts.headersToAttributes,\n        includeHeaders: opts.includeHeaders,\n        krispEnabled: opts.krispEnabled,\n      }),\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'CreateSIPInboundTrunk',\n      req,\n      await this.authHeader({}, { admin: true }),\n    );\n    return SIPInboundTrunkInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @param name - human-readable name of the trunk\n   * @param address - hostname and port of the SIP server to dial\n   * @param numbers - phone numbers of the trunk\n   * @param opts - CreateSipTrunkOptions\n   */\n  async createSipOutboundTrunk(\n    name: string,\n    address: string,\n    numbers: string[],\n    opts?: CreateSipOutboundTrunkOptions,\n  ): Promise<SIPOutboundTrunkInfo> {\n    if (opts === undefined) {\n      opts = {\n        transport: SIPTransport.SIP_TRANSPORT_AUTO,\n      };\n    }\n\n    const req = new CreateSIPOutboundTrunkRequest({\n      trunk: new SIPOutboundTrunkInfo({\n        name: name,\n        address: address,\n        numbers: numbers,\n        metadata: opts.metadata,\n        transport: opts.transport,\n        authUsername: opts.authUsername ?? opts.auth_username,\n        authPassword: opts.authPassword ?? opts.auth_password,\n        headers: opts.headers,\n        headersToAttributes: opts.headersToAttributes,\n        includeHeaders: opts.includeHeaders,\n      }),\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'CreateSIPOutboundTrunk',\n      req,\n      await this.authHeader({}, { admin: true }),\n    );\n    return SIPOutboundTrunkInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @deprecated use `listSipInboundTrunk` or `listSipOutboundTrunk`\n   */\n  async listSipTrunk(): Promise<Array<SIPTrunkInfo>> {\n    const req: Partial<ListSIPTrunkRequest> = {};\n    const data = await this.rpc.request(\n      svc,\n      'ListSIPTrunk',\n      new ListSIPTrunkRequest(req).toJson(),\n      await this.authHeader({}, { admin: true }),\n    );\n    return ListSIPTrunkResponse.fromJson(data, { ignoreUnknownFields: true }).items ?? [];\n  }\n\n  async listSipInboundTrunk(): Promise<Array<SIPInboundTrunkInfo>> {\n    const req: Partial<ListSIPInboundTrunkRequest> = {};\n    const data = await this.rpc.request(\n      svc,\n      'ListSIPInboundTrunk',\n      new ListSIPInboundTrunkRequest(req).toJson(),\n      await this.authHeader({}, { admin: true }),\n    );\n    return ListSIPInboundTrunkResponse.fromJson(data, { ignoreUnknownFields: true }).items ?? [];\n  }\n\n  async listSipOutboundTrunk(): Promise<Array<SIPOutboundTrunkInfo>> {\n    const req: Partial<ListSIPOutboundTrunkRequest> = {};\n    const data = await this.rpc.request(\n      svc,\n      'ListSIPOutboundTrunk',\n      new ListSIPOutboundTrunkRequest(req).toJson(),\n      await this.authHeader({}, { admin: true }),\n    );\n    return ListSIPOutboundTrunkResponse.fromJson(data, { ignoreUnknownFields: true }).items ?? [];\n  }\n\n  /**\n   * @param sipTrunkId - sip trunk to delete\n   */\n  async deleteSipTrunk(sipTrunkId: string): Promise<SIPTrunkInfo> {\n    const data = await this.rpc.request(\n      svc,\n      'DeleteSIPTrunk',\n      new DeleteSIPTrunkRequest({ sipTrunkId }).toJson(),\n      await this.authHeader({}, { admin: true }),\n    );\n    return SIPTrunkInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @param rule - sip dispatch rule\n   * @param opts - CreateSipDispatchRuleOptions\n   */\n  async createSipDispatchRule(\n    rule: SipDispatchRuleDirect | SipDispatchRuleIndividual,\n    opts?: CreateSipDispatchRuleOptions,\n  ): Promise<SIPDispatchRuleInfo> {\n    if (opts === undefined) {\n      opts = {};\n    }\n    let ruleProto: SIPDispatchRule | undefined = undefined;\n    if (rule.type == 'direct') {\n      ruleProto = new SIPDispatchRule({\n        rule: {\n          case: 'dispatchRuleDirect',\n          value: new SIPDispatchRuleDirect({\n            roomName: rule.roomName,\n            pin: rule.pin || '',\n          }),\n        },\n      });\n    } else if (rule.type == 'individual') {\n      ruleProto = new SIPDispatchRule({\n        rule: {\n          case: 'dispatchRuleIndividual',\n          value: new SIPDispatchRuleIndividual({\n            roomPrefix: rule.roomPrefix,\n            pin: rule.pin || '',\n          }),\n        },\n      });\n    }\n\n    const req = new CreateSIPDispatchRuleRequest({\n      rule: ruleProto,\n      trunkIds: opts.trunkIds,\n      hidePhoneNumber: opts.hidePhoneNumber,\n      name: opts.name,\n      metadata: opts.metadata,\n      attributes: opts.attributes,\n      roomPreset: opts.roomPreset,\n      roomConfig: opts.roomConfig,\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'CreateSIPDispatchRule',\n      req,\n      await this.authHeader({}, { admin: true }),\n    );\n    return SIPDispatchRuleInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  async listSipDispatchRule(): Promise<Array<SIPDispatchRuleInfo>> {\n    const req: Partial<ListSIPDispatchRuleRequest> = {};\n    const data = await this.rpc.request(\n      svc,\n      'ListSIPDispatchRule',\n      new ListSIPDispatchRuleRequest(req).toJson(),\n      await this.authHeader({}, { admin: true }),\n    );\n    return ListSIPDispatchRuleResponse.fromJson(data, { ignoreUnknownFields: true }).items ?? [];\n  }\n\n  /**\n   * @param sipDispatchRuleId - sip trunk to delete\n   */\n  async deleteSipDispatchRule(sipDispatchRuleId: string): Promise<SIPDispatchRuleInfo> {\n    const data = await this.rpc.request(\n      svc,\n      'DeleteSIPDispatchRule',\n      new DeleteSIPDispatchRuleRequest({ sipDispatchRuleId }).toJson(),\n      await this.authHeader({}, { admin: true }),\n    );\n    return SIPDispatchRuleInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @param sipTrunkId - sip trunk to use for the call\n   * @param number - number to dial\n   * @param roomName - room to attach the call to\n   * @param opts - CreateSipParticipantOptions\n   */\n  async createSipParticipant(\n    sipTrunkId: string,\n    number: string,\n    roomName: string,\n    opts?: CreateSipParticipantOptions,\n  ): Promise<SIPParticipantInfo> {\n    if (opts === undefined) {\n      opts = {};\n    }\n\n    const req = new CreateSIPParticipantRequest({\n      sipTrunkId: sipTrunkId,\n      sipCallTo: number,\n      roomName: roomName,\n      participantIdentity: opts.participantIdentity || 'sip-participant',\n      participantName: opts.participantName,\n      participantMetadata: opts.participantMetadata,\n      dtmf: opts.dtmf,\n      playDialtone: opts.playDialtone ?? opts.playRingtone,\n      headers: opts.headers,\n      hidePhoneNumber: opts.hidePhoneNumber,\n      includeHeaders: opts.includeHeaders,\n      ringingTimeout: opts.ringingTimeout\n        ? new Duration({ seconds: BigInt(opts.ringingTimeout) })\n        : undefined,\n      maxCallDuration: opts.maxCallDuration\n        ? new Duration({ seconds: BigInt(opts.maxCallDuration) })\n        : undefined,\n      enableKrisp: opts.enableKrisp,\n    }).toJson();\n\n    const data = await this.rpc.request(\n      svc,\n      'CreateSIPParticipant',\n      req,\n      await this.authHeader({}, { call: true }),\n    );\n    return SIPParticipantInfo.fromJson(data, { ignoreUnknownFields: true });\n  }\n\n  /**\n   * @param roomName - room the SIP participant to transfer is connectd to\n   * @param participantIdentity - identity of the SIP participant to transfer\n   * @param transferTo - SIP URL to transfer the participant to\n   */\n  async transferSipParticipant(\n    roomName: string,\n    participantIdentity: string,\n    transferTo: string,\n    opts?: TransferSipParticipantOptions,\n  ): Promise<void> {\n    if (opts === undefined) {\n      opts = {};\n    }\n\n    const req = new TransferSIPParticipantRequest({\n      participantIdentity: participantIdentity,\n      roomName: roomName,\n      transferTo: transferTo,\n      playDialtone: opts.playDialtone,\n      headers: opts.headers,\n    }).toJson();\n\n    await this.rpc.request(\n      svc,\n      'TransferSIPParticipant',\n      req,\n      await this.authHeader({ roomAdmin: true, room: roomName }, { call: true }),\n    );\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1365, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1371, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/digest.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\n\n// Use the Web Crypto API if available, otherwise fallback to Node.js crypto\nexport async function digest(data: string): Promise<ArrayBuffer> {\n  if (globalThis.crypto?.subtle) {\n    const encoder = new TextEncoder();\n    return crypto.subtle.digest('SHA-256', encoder.encode(data));\n  } else {\n    const nodeCrypto = await import('node:crypto');\n    return nodeCrypto.createHash('sha256').update(data).digest();\n  }\n}\n"],"names":[],"mappings":";;;AAKA,eAAsB,OAAO,IAAA,EAAoC;IALjE,IAAA;IAME,IAAA,CAAI,KAAA,WAAW,MAAA,KAAX,OAAA,KAAA,IAAA,GAAmB,MAAA,EAAQ;QAC7B,MAAM,UAAU,IAAI,YAAY;QAChC,OAAO,OAAO,MAAA,CAAO,MAAA,CAAO,WAAW,QAAQ,MAAA,CAAO,IAAI,CAAC;IAC7D,OAAO;QACL,MAAM,aAAa,MAAM,OAAO,aAAa;QAC7C,OAAO,WAAW,UAAA,CAAW,QAAQ,EAAE,MAAA,CAAO,IAAI,EAAE,MAAA,CAAO;IAC7D;AACF","ignoreList":[0]}},
    {"offset": {"line": 1386, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1392, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/WebhookReceiver.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { BinaryReadOptions, JsonReadOptions, JsonValue } from '@bufbuild/protobuf';\nimport { WebhookEvent as ProtoWebhookEvent } from '@livekit/protocol';\nimport { TokenVerifier } from './AccessToken.js';\nimport { digest } from './digest.js';\n\nexport const authorizeHeader = 'Authorize';\n\nexport class WebhookEvent extends ProtoWebhookEvent {\n  event: WebhookEventNames = '';\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebhookEvent {\n    return new WebhookEvent().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebhookEvent {\n    return new WebhookEvent().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebhookEvent {\n    return new WebhookEvent().fromJsonString(jsonString, options);\n  }\n}\n\nexport type WebhookEventNames =\n  | 'room_started'\n  | 'room_finished'\n  | 'participant_joined'\n  | 'participant_left'\n  | 'track_published'\n  | 'track_unpublished'\n  | 'egress_started'\n  | 'egress_updated'\n  | 'egress_ended'\n  | 'ingress_started'\n  | 'ingress_ended'\n  /**\n   * @internal\n   * @remarks only used as a default value, not a valid webhook event\n   */\n  | '';\n\nexport class WebhookReceiver {\n  private verifier: TokenVerifier;\n\n  constructor(apiKey: string, apiSecret: string) {\n    this.verifier = new TokenVerifier(apiKey, apiSecret);\n  }\n\n  /**\n   * @param body - string of the posted body\n   * @param authHeader - `Authorization` header from the request\n   * @param skipAuth - true to skip auth validation\n   * @returns\n   */\n  async receive(\n    body: string,\n    authHeader?: string,\n    skipAuth: boolean = false,\n  ): Promise<WebhookEvent> {\n    // verify token\n    if (!skipAuth) {\n      if (!authHeader) {\n        throw new Error('authorization header is empty');\n      }\n      const claims = await this.verifier.verify(authHeader);\n      // confirm sha\n      const hash = await digest(body);\n      const hashDecoded = btoa(\n        Array.from(new Uint8Array(hash))\n          .map((v) => String.fromCharCode(v))\n          .join(''),\n      );\n\n      if (claims.sha256 !== hashDecoded) {\n        throw new Error('sha256 checksum of body does not match');\n      }\n    }\n\n    return WebhookEvent.fromJson(JSON.parse(body), { ignoreUnknownFields: true });\n  }\n}\n"],"names":[],"mappings":";;;;;AAIA,SAAS,gBAAgB,yBAAyB;AAClD,SAAS,qBAAqB;AAC9B,SAAS,cAAc;;;;;AAEhB,MAAM,kBAAkB;AAExB,MAAM,+LAAqB,eAAA,CAAkB;IAA7C,aAAA;QAAA,KAAA,IAAA;QACL,IAAA,CAAA,KAAA,GAA2B;IAAA;IAE3B,OAAO,WAAW,KAAA,EAAmB,OAAA,EAAoD;QACvF,OAAO,IAAI,aAAa,EAAE,UAAA,CAAW,OAAO,OAAO;IACrD;IAEA,OAAO,SAAS,SAAA,EAAsB,OAAA,EAAkD;QACtF,OAAO,IAAI,aAAa,EAAE,QAAA,CAAS,WAAW,OAAO;IACvD;IAEA,OAAO,eAAe,UAAA,EAAoB,OAAA,EAAkD;QAC1F,OAAO,IAAI,aAAa,EAAE,cAAA,CAAe,YAAY,OAAO;IAC9D;AACF;AAoBO,MAAM,gBAAgB;IAG3B,YAAY,MAAA,EAAgB,SAAA,CAAmB;QAC7C,IAAA,CAAK,QAAA,GAAW,sKAAI,gBAAA,CAAc,QAAQ,SAAS;IACrD;IAAA;;;;;GAAA,GAQA,MAAM,QACJ,IAAA,EACA,UAAA,EACA,WAAoB,KAAA,EACG;QAEvB,IAAI,CAAC,UAAU;YACb,IAAI,CAAC,YAAY;gBACf,MAAM,IAAI,MAAM,+BAA+B;YACjD;YACA,MAAM,SAAS,MAAM,IAAA,CAAK,QAAA,CAAS,MAAA,CAAO,UAAU;YAEpD,MAAM,OAAO,uKAAM,SAAA,EAAO,IAAI;YAC9B,MAAM,cAAc,KAClB,MAAM,IAAA,CAAK,IAAI,WAAW,IAAI,CAAC,EAC5B,GAAA,CAAI,CAAC,IAAM,OAAO,YAAA,CAAa,CAAC,CAAC,EACjC,IAAA,CAAK,EAAE;YAGZ,IAAI,OAAO,MAAA,KAAW,aAAa;gBACjC,MAAM,IAAI,MAAM,wCAAwC;YAC1D;QACF;QAEA,OAAO,aAAa,QAAA,CAAS,KAAK,KAAA,CAAM,IAAI,GAAG;YAAE,qBAAqB;QAAK,CAAC;IAC9E;AACF","ignoreList":[0]}},
    {"offset": {"line": 1448, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1454, "column": 0}, "map": {"version":3,"sources":["file:///Users/ekaspreetsinghatwal/DevMux/node_modules/livekit-server-sdk/src/index.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\n\nexport {\n  AliOSSUpload,\n  AudioCodec,\n  AutoParticipantEgress,\n  AutoTrackEgress,\n  AzureBlobUpload,\n  DataPacket_Kind,\n  DirectFileOutput,\n  EgressInfo,\n  EgressStatus,\n  EncodedFileOutput,\n  EncodedFileType,\n  EncodingOptions,\n  EncodingOptionsPreset,\n  GCPUpload,\n  ImageCodec,\n  ImageFileSuffix,\n  ImageOutput,\n  IngressAudioEncodingOptions,\n  IngressAudioEncodingPreset,\n  IngressAudioOptions,\n  IngressInfo,\n  IngressInput,\n  IngressState,\n  IngressVideoEncodingOptions,\n  IngressVideoEncodingPreset,\n  IngressVideoOptions,\n  ParticipantEgressRequest,\n  ParticipantInfo,\n  ParticipantInfo_State,\n  ParticipantPermission,\n  Room,\n  RoomCompositeEgressRequest,\n  RoomEgress,\n  S3Upload,\n  SIPDispatchRuleInfo,\n  SIPParticipantInfo,\n  SIPTrunkInfo,\n  SegmentedFileOutput,\n  SegmentedFileProtocol,\n  StreamOutput,\n  StreamProtocol,\n  TrackCompositeEgressRequest,\n  TrackEgressRequest,\n  TrackInfo,\n  TrackSource,\n  TrackType,\n  WebEgressRequest,\n  VideoCodec,\n} from '@livekit/protocol';\nexport * from './AccessToken.js';\nexport * from './AgentDispatchClient.js';\nexport * from './EgressClient.js';\nexport * from './grants.js';\nexport * from './IngressClient.js';\nexport * from './RoomServiceClient.js';\nexport * from './SipClient.js';\nexport * from './WebhookReceiver.js';\n"],"names":[],"mappings":"","ignoreList":[0]}},
    {"offset": {"line": 1466, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}